import telebot
from telethon import TelegramClient
import requests
from time import sleep
from datetime import date, timedelta, datetime
from users import UserService
from threading import Thread

import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

with open("assets/token.txt", "r") as f:
    TOKEN = f.readline().strip()

with open("assets/credentials.txt", "r") as f:
    api_id_bot = int(f.readline())
    api_hash_bot = f.readline().strip()

bot = telebot.TeleBot(TOKEN)
client_bot = TelegramClient(
    "bot", api_id_bot, api_hash_bot, system_version="4.16.30-vxCUSTOM"
).start(bot_token=TOKEN)
bot_loop = client_bot.loop

command_list_help = [
    "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É",
    "/help - –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
    "/setTime hh:mm - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å:–º–∏–Ω—É—Ç–∞)",
    "/setPeriod n - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (n –≤ –¥–Ω—è—Ö)",
    "/setLimit n - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–≥–¥–µ n - —á–∏—Å–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π)",
    "/digest - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç",
    "/settings - –í—ã–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫",
    "/exit - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
]

command_list_settings = [
    "/add <id –∫–∞–Ω–∞–ª–∞> - –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª –∫ –¥–∞–π–¥–∂–µ—Å—Ç—É",
    "/del <id –∫–∞–Ω–∞–ª–∞> - –û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª –æ—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞",
    "/getlist - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
    "/getGroups - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∫–∞–Ω–∞–ª–æ–≤",
    "/addChannelGroup <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫–∞–Ω–∞–ª–æ–≤> - –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –∫–∞–Ω–∞–ª–æ–≤",
    "/addFeed <feed> - –î–æ–±–∞–≤–∏—Ç—å RSS/Atom-—Ñ–∏–¥",
    "/delFeed <feed> - –£–¥–∞–ª–∏—Ç—å RSS/Atom-—Ñ–∏–¥",
]

users = bot_loop.run_until_complete(UserService().init("127.0.0.1", 5000))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: user_id -> –∫–æ–º–∞–Ω–¥–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∂–¥—ë–º –∞—Ä–≥—É–º–µ–Ω—Ç
pending_commands = {}

@bot.message_handler(commands=["start"])
def start_bot(message):
    user_id = message.from_user.id
    if bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    bot_loop.run_until_complete(users.register_user(login=user_id, name=str(user_id)))

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("/help", "/digest")
    markup.row("/settings", "/exit")

    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        "üìã –ù–∞–ø–∏—à–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

    bot.send_message(
        message.from_user.id, welcome_text, reply_markup=markup, parse_mode="Markdown"
    )


@bot.message_handler(commands=["help"])
def help_bot(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return
    help_text = "*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*\n\n" + "\n".join(command_list_help)

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="open_settings")
    )

    bot.send_message(user_id, help_text, reply_markup=markup, parse_mode="Markdown")


def send_reaction_buttons(user_id, entity_id):
    metadata = f"{user_id},{entity_id}"
    markup = telebot.types.InlineKeyboardMarkup()
    btn_yes = telebot.types.InlineKeyboardButton("üëç", callback_data=f"like_{metadata}")
    btn_no = telebot.types.InlineKeyboardButton("üëé", callback_data=f"dislike_{metadata}")
    markup.add(btn_yes, btn_no)

    bot.send_message(user_id, "–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –û—Ü–µ–Ω–∏—Ç–µ –Ω–∏–∂–µ:", reply_markup=markup)


async def forward_messages(user_id, messages):
    for m in messages:
        bot.send_message(user_id, m["description"] + "\n" + m["link"])
        send_reaction_buttons(user_id, m["entity_id"])


def make_data(user: str, limit: int, offset_date: datetime, channel_ids):
    return {
        "user": user,
        "limit": limit,
        "offset_date": str(offset_date),
        "channels": [{"name": id} for id in channel_ids],
    }


groups = {
    "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é": [],
}


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    headers = {"Content-type": "application/json"}

    if call.data.startswith("like"):
        buffer = call.data[5:].split(",")
        data = {"user": buffer[0], "entity_id": int(buffer[1])}
        requests.post("http://127.0.0.1:8000/dislike", headers=headers, json=data)
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! üëç")

    elif call.data.startswith("dislike"):
        buffer = call.data[8:].split(",")
        data = {"user": buffer[0], "entity_id": int(buffer[1])}
        requests.post("http://127.0.0.1:8000/dislike", headers=headers, json=data)
        bot.answer_callback_query(call.id, "–£—á—Ç—ë–º –≤–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è! üôÅ")


    elif call.data.startswith("add$"):

        _, item_id, group_name = call.data.split("$")

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: item_id={item_id}, group_name={group_name}")

        if group_name not in groups:
            groups[group_name] = []

        groups[group_name].append(item_id)

        logger.info(f"groups —Ç–µ–ø–µ—Ä—å: {groups}")

        bot.answer_callback_query(call.id, "–ö–∞–Ω–∞–ª/—Ñ–∏–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ‚úÖ")


    elif call.data.startswith("digest"):
        _, group_name, user_id = call.data.split("$")
        bot.answer_callback_query(call.id, "–î–∞–π–¥–∂–µ—Å—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è... ‚è≥")
        send_digest(
            int(user_id),
            date.today()
            - timedelta(
                days=bot_loop.run_until_complete(users.get_period(int(user_id))) or 1
            ),
            True,
        )

    elif call.data == "open_settings":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("/add", "/del")
        markup.row("/addFeed", "/delFeed")
        markup.row("/getlist", "/getGroups")
        markup.row("/addChannelGroup", "/back_to_main")
        bot.send_message(call.message.chat.id, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=markup)


def send_digest(user_id, offset, sendmessage=True):
    channel_ids = bot_loop.run_until_complete(users.channels(user=user_id))
    if len(channel_ids) == 0:
        bot.send_message(
            user_id,
            "‚ùå –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª.",
        )
        return
    if sendmessage:
        bot.send_message(user_id, "üìÖ *–î–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*", parse_mode="Markdown")

    headers = {"Content-type": "application/json"}
    data = make_data(
        str(user_id),
        bot_loop.run_until_complete(users.get_limit(user_id)),
        offset,
        channel_ids,
    )
    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–π–¥–∂–µ—Å—Ç–∞: {data}")
    response = requests.get("http://127.0.0.1:8000/tgdigest", headers=headers, json=data)

    if response.status_code != 200:
        bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç.")
        return

    messages = response.json()
    bot_loop.run_until_complete(forward_messages(user_id, messages))


@bot.message_handler(commands=["digest"])
def digest_bot(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    markup = telebot.types.InlineKeyboardMarkup()
    buttons = [
        telebot.types.InlineKeyboardButton(
            group_name, callback_data=f"digest${group_name}${user_id}"
        )
        for group_name in groups.keys()
    ]
    markup.add(*buttons)

    bot.send_message(
        user_id,
        "üìÇ *–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞:*",
        reply_markup=markup,
        parse_mode="Markdown",
    )


@bot.message_handler(commands=["settings"])
def settings_bot(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("/add", "/del")
    markup.row("/addFeed", "/delFeed")
    markup.row("/getlist", "/getGroups")
    markup.row("/addChannelGroup", "/back_to_main")

    settings_text = "*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*"
    bot.send_message(user_id, settings_text, reply_markup=markup, parse_mode="Markdown")


def get_title(channel_id):
    try:
        chat = bot.get_chat(channel_id)
        return chat.title
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"


@bot.message_handler(commands=["add"])
def add_channel_bot(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    message_args = message.text.split()
    if len(message_args) < 2:
        # –ê—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω
        bot.send_message(
            user_id,
            "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–∞–Ω–∞–ª! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ *—Ç–æ–ª—å–∫–æ ID –∫–∞–Ω–∞–ª–∞* (–±–µ–∑ /).",
            parse_mode="Markdown"
        )
        pending_commands[user_id] = "add"
        return

    channel_id = message_args[1]
    title = get_title(channel_id)
    if title == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª":
        bot.send_message(user_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞", parse_mode="Markdown")
        return

    bot_loop.run_until_complete(users.subscribe(login=user_id, channel=channel_id))

    markup = telebot.types.InlineKeyboardMarkup()
    buttons = [
        telebot.types.InlineKeyboardButton(
            group_name, callback_data=f"add${channel_id}${group_name}"
        )
        for group_name in groups.keys()
    ]
    markup.add(*buttons)

    bot.send_message(
        user_id,
        f"üìÇ –í –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª *{title}*?",
        reply_markup=markup,
        parse_mode="Markdown",
    )


@bot.message_handler(commands=["del"])
def del_channel_bot(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    message_args = message.text.split()
    if len(message_args) < 2:
        bot.send_message(
            user_id,
            "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–∞–Ω–∞–ª! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ *—Ç–æ–ª—å–∫–æ ID –∫–∞–Ω–∞–ª–∞* (–±–µ–∑ /).",
            parse_mode="Markdown"
        )
        pending_commands[user_id] = "del"
        return

    channel_id = message_args[1]
    title = get_title(channel_id)
    if title == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª":
        bot.send_message(user_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞", parse_mode="Markdown")
        return

    deleted = bot_loop.run_until_complete(users.unsubscribe(login=user_id, channel=channel_id))
    if not deleted:
        bot.send_message(
            user_id, f'‚ùå –ö–∞–Ω–∞–ª–∞ "{title}" –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!', parse_mode="Markdown"
        )
        return

    bot.send_message(
        user_id, f'‚úÖ –ö–∞–Ω–∞–ª "{title}" –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.', parse_mode="Markdown"
    )


@bot.message_handler(commands=["addFeed"])
def add_feed_bot(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    message_args = message.text.split()
    if len(message_args) < 2:
        bot.send_message(
            user_id,
            "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ñ–∏–¥! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ *—Ç–æ–ª—å–∫–æ URL —Ñ–∏–¥–∞* (–±–µ–∑ /).",
            parse_mode="Markdown"
        )
        pending_commands[user_id] = "addFeed"
        return

    feed = message_args[1]
    bot_loop.run_until_complete(users.subscribe(login=user_id, feed=feed))

    markup = telebot.types.InlineKeyboardMarkup()
    buttons = [
        telebot.types.InlineKeyboardButton(
            group_name, callback_data=f"add${feed}${group_name}"
        )
        for group_name in groups.keys()
    ]
    markup.add(*buttons)

    bot.send_message(
        user_id,
        f"üìÇ –í –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–¥ *{feed}*?",
        reply_markup=markup,
        parse_mode="Markdown",
    )


@bot.message_handler(commands=["delFeed"])
def del_feed_bot(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    message_args = message.text.split()
    if len(message_args) < 2:
        bot.send_message(
            user_id,
            "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ñ–∏–¥! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º *—Ç–æ–ª—å–∫–æ URL —Ñ–∏–¥–∞* (–±–µ–∑ /).",
            parse_mode="Markdown"
        )
        pending_commands[user_id] = "delFeed"
        return

    feed = message_args[1]
    deleted = bot_loop.run_until_complete(users.unsubscribe(login=user_id, feed=feed))
    if not deleted:
        bot.send_message(user_id, f'‚ùå –§–∏–¥–∞ "{feed}" –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!', parse_mode="Markdown")
        return

    bot.send_message(
        user_id, f'‚úÖ –§–∏–¥ "{feed}" –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.', parse_mode="Markdown"
    )


@bot.message_handler(commands=["getlist"])
def get_list_bot(message)
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    channel_ids = bot_loop.run_until_complete(users.channels(user=user_id))
    if not channel_ids:
        bot.send_message(
            user_id,
            "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª.",
        )
        return

    channels_text = "\n".join([f"‚Ä¢ {cid} - {get_title(cid)}" for cid in channel_ids])
    bot.send_message(
        user_id,
        f"üìÉ *–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:*\n{channels_text}",
        parse_mode="Markdown",
    )


@bot.message_handler(commands=["getGroups"])
def get_groups_list_bot(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    if not groups:
        bot.send_message(user_id, "‚ùå –ì—Ä—É–ø–ø—ã –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    groups_text = "\n\n".join(
        [
            f"‚Ä¢ *{group_name}* - " + ("–ü—É—Å—Ç–æ" if not groupChannels else ", ".join(groupChannels))
            for group_name, groupChannels in groups.items()
        ]
    )
    bot.send_message(
        user_id,
        f"üìÇ *–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∫–∞–Ω–∞–ª–æ–≤:*\n\n{groups_text}",
        parse_mode="Markdown",
    )


@bot.message_handler(commands=["calibrate"])
def calibrate_bot(message):
    send_digest(message.from_user.id, date.today() - timedelta(days=3), False)
    bot.send_message(
        message.from_user.id,
        "üîß –ü—Ä–æ–π–¥–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É! –û—Ü–µ–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ, –∏ –º—ã –ø–æ–¥—Å—Ç—Ä–æ–∏–º –≤—Å—ë –ø–æ–¥ –≤–∞—Å!",
    )


@bot.message_handler(commands=["exit"])
def exit_bot(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("/start")

    bot.send_message(
        user_id,
        "üëã –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.",
        reply_markup=markup,
    )


@bot.message_handler(commands=["addChannelGroup"])
def add_channel_group_bot(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    message_args = message.text.split()
    if len(message_args) < 2:
        bot.send_message(
            user_id,
            "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º *—Ç–æ–ª—å–∫–æ –∏–º—è –≥—Ä—É–ø–ø—ã* (–±–µ–∑ /).",
            parse_mode="Markdown"
        )
        pending_commands[user_id] = "addChannelGroup"
        return

    group_name = message_args[1]
    if group_name in groups:
        bot.send_message(
            user_id, "‚ùå –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="Markdown"
        )
        return

    groups[group_name] = []
    bot.send_message(
        user_id, f"‚úÖ –ì—Ä—É–ø–ø–∞ *{group_name}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", parse_mode="Markdown"
    )


timesToSend = []
sended = {}


def clockWatcherRoutine():
    while True:
        sleep(60)
        current_time = datetime.now()
        for (u_id, hour, minute) in timesToSend:
            curr_date = current_time.date()
            if sended.get(u_id) == curr_date:
                continue
            if hour == current_time.hour and minute == current_time.minute:
                sended[u_id] = curr_date
                send_digest(
                    u_id,
                    date.today()
                    - timedelta(
                        days=bot_loop.run_until_complete(users.get_period(u_id)) or 1
                    ),
                )


clockWatcher = Thread(target=clockWatcherRoutine)
clockWatcher.setDaemon(True)
clockWatcher.start()


@bot.message_handler(commands=["setTime"])
def setTime_bot(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    message_args = message.text.split()
    if len(message_args) < 2:
        existing_time = None
        for (uid, h, m) in timesToSend:
            if uid == user_id:
                existing_time = f"{h:02d}:{m:02d}"
                break

        if existing_time:
            bot.send_message(
                user_id,
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {existing_time}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:30)."
            )
        else:
            bot.send_message(
                user_id,
                "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:30)."
            )
        pending_commands[user_id] = "setTime"
        return

    try:
        hour, minute = map(int, message_args[1].split(":"))
        if not (0 <= hour < 24 and 0 <= minute < 60):
            raise ValueError
        timesToSend.append((user_id, hour, minute))
        bot.send_message(
            user_id,
            f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d}."
        )
    except (IndexError, ValueError):
        bot.send_message(
            user_id,
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setTime hh:mm",
            parse_mode="Markdown",
        )


@bot.message_handler(commands=["setPeriod"])
def setPeriod_bot(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    message_args = message.text.split()
    if len(message_args) < 2:
        bot.send_message(
            user_id,
            "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2)."
        )
        pending_commands[user_id] = "setPeriod"
        return

    try:
        period = int(message_args[1])
        if period <= 0:
            raise ValueError
        if not bot_loop.run_until_complete(users.set_period(user_id, period)):
            raise RuntimeError("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –≤ –ë–î")

        bot.send_message(
            user_id,
            f"üìÖ –ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∫–∞–∂–¥—ã–µ {period} –¥–Ω–µ–π.",
        )
    except (IndexError, ValueError):
        bot.send_message(
            user_id,
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setPeriod n (–≥–¥–µ n - —á–∏—Å–ª–æ –¥–Ω–µ–π)",
            parse_mode="Markdown",
        )
    except RuntimeError:
        bot.send_message(
            user_id,
            "‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            parse_mode="Markdown",
        )


@bot.message_handler(commands=["setLimit"])
def setLimit_bot(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    message_args = message.text.split()
    if len(message_args) < 2:
        bot.send_message(
            user_id,
            "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —á–∏—Å–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5)."
        )
        pending_commands[user_id] = "setLimit"
        return

    try:
        limit = int(message_args[1])
        if limit <= 0:
            raise ValueError
        if not bot_loop.run_until_complete(users.set_limit(user_id, limit)):
            raise RuntimeError("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏–º–∏—Ç –≤ –ë–î")

        bot.send_message(
            user_id,
            f"#Ô∏è‚É£ –†–∞–∑–º–µ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {limit}.",
        )
    except (IndexError, ValueError):
        bot.send_message(
            user_id,
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setLimit n (–≥–¥–µ n - —á–∏—Å–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π)",
            parse_mode="Markdown",
        )
    except RuntimeError:
        bot.send_message(
            user_id,
            "‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            parse_mode="Markdown",
        )


@bot.message_handler(func=lambda message: message.text == "/back_to_main")
def back_to_main(message):
    user_id = message.from_user.id
    if not bot_loop.run_until_complete(users.check_user(login=user_id)):
        return

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("/help", "/digest")
    markup.row("/settings", "/exit")
    bot.send_message(user_id, "üîô –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)

@bot.message_handler(func=lambda m: not m.text.startswith("/"))
def handle_pending_arguments(message):
    user_id = message.from_user.id
    if user_id not in pending_commands:
        return

    command_waiting = pending_commands[user_id]
    user_input = message.text.strip()

    del pending_commands[user_id]

    fake_message = telebot.types.Message(
        message_id=message.message_id,
        from_user=message.from_user,
        chat=message.chat,
        date=message.date,
        content_type=message.content_type,
        options={},
        json_string="{}"
    )
    fake_message.text = f"/{command_waiting} {user_input}"

    if command_waiting == "add":
        add_channel_bot(fake_message)
    elif command_waiting == "del":
        del_channel_bot(fake_message)
    elif command_waiting == "addFeed":
        add_feed_bot(fake_message)
    elif command_waiting == "delFeed":
        del_feed_bot(fake_message)
    elif command_waiting == "addChannelGroup":
        add_channel_group_bot(fake_message)
    elif command_waiting == "setTime":
        setTime_bot(fake_message)
    elif command_waiting == "setPeriod":
        setPeriod_bot(fake_message)
    elif command_waiting == "setLimit":
        setLimit_bot(fake_message)

bot.infinity_polling()
